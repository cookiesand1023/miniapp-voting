"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FanmeBackend = void 0;
const express_1 = __importDefault(require("express"));
const axios_1 = __importDefault(require("axios"));
const databaseApi_1 = __importDefault(require("./databaseApi"));
const fileApi_1 = __importDefault(require("./fileApi"));
const appApi_1 = __importDefault(require("./appApi"));
const cors = require('cors');
const formidableMiddleware = require('express-formidable');
const jwtDecode = require('jwt-decode');
const cookieSession = require('cookie-session');
var Environment;
(function (Environment) {
    Environment["Development"] = "development";
    Environment["Staging"] = "staging";
    Environment["Production"] = "production";
})(Environment || (Environment = {}));
class FanmeBackend {
    constructor(portNumber = 3000) {
        this.frontendUrl = process.env["__FANME_MINIAPP_FRONTEND_URL__"] || process.env["FANME_FRONTEND_URL"];
        this.backendUrl = process.env["__FANME_MINIAPP_BACKEND_URL__"] || process.env["FANME_BACKEND_URL"];
        this.randId = process.env["__FANME_MINIAPP_RAND__"];
        this.clientId = process.env["__FANME_MINIAPP_CLIENT_ID__"] || process.env["FANME_CLIENT_ID"];
        this.clientSecret = process.env["__FANME_MINIAPP_CLIENT_SECRET__"] || process.env["FANME_CLIENT_SECRET"];
        this.listeningPort = portNumber;
        this.appServerUrl = process.env["__FANME_MINIAPP_APP_SERVER_URL__"] || 'https://app.fanme.link';
    }
    get express() {
        return this._express;
    }
    get baseAppId() {
        if (this.environment == Environment.Development) {
            return this._baseAppId;
        }
        else {
            return parseInt(process.env["__FANME_MINIAPP_APP_ID__"] || '') || 0;
        }
    }
    get sellerUserId() {
        return this._express.get("__seller_uuid__") || '';
    }
    get sellerAppId() {
        return this._express.get("__seller_app_id__") || 0;
    }
    get userUuid() {
        return this._express.get("__user_uuid__") || ''
      }
      
    get userName() {
        return this._express.get("__user_name__") || ''
      }
    get db() {
        if (this.baseAppId == 0 || this.sellerUserId == '' || this.sellerAppId == 0) {
            console.log("db object cannot be used outside of request context");
            console.log("Shutdown server");
            process.exit(-1);
        }
        return new databaseApi_1.default(this.axiosInstance, this.baseAppId, this.sellerUserId, this.sellerAppId);
    }
    get file() {
        if (this.baseAppId == 0 || this.sellerUserId == '' || this.sellerAppId == 0) {
            console.log("file object cannot be used outside of request context");
            console.log("Shutdown server");
            process.exit(-1);
        }
        return new fileApi_1.default(this.axiosInstance, this.baseAppId, this.sellerUserId, this.sellerAppId);
    }
    get app() {
        if (this.baseAppId == 0 || this.sellerUserId == '' || this.sellerAppId == 0) {
            console.log("app object cannot be used outside of request context");
            console.log("Shutdown server");
            process.exit(-1);
        }
        return new appApi_1.default(this.axiosInstance, this.baseAppId, this.sellerUserId, this.sellerAppId);
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            const e = process.env["__FANME_MINIAPP_ENV__"];
            switch (e) {
                case "production":
                    this.environment = Environment.Production;
                    break;
                case "staging":
                    this.environment = Environment.Staging;
                    break;
                default:
                    this.environment = Environment.Development;
                    break;
            }
            console.log(`Initializing: ${this.environment} environment`);
            if (this.environment == Environment.Development) {
                if (!this.frontendUrl) {
                    return Promise.reject("Missing FANME_FRONTEND_URL environment variable");
                }
                if (!this.backendUrl) {
                    return Promise.reject("Missing FANME_BACKEND_URL environment variable");
                }
                if (!this.clientId) {
                    return Promise.reject("Missing FANME_CLIENT_ID environment variable");
                }
                if (!this.clientSecret) {
                    return Promise.reject("Missing FANME_CLIENT_SECRET environment variable");
                }
            }
            this._express = (0, express_1.default)();
            this._express.set('trust proxy', 1);
            this._express.use(cookieSession({
                name: 'ma-sess',
                keys: ['fanme-miniapp'],
                cookie: { maxAge: 60 * 60 * 24 * 365 }
            }));
            if (this.frontendUrl) {
                this._express.use(cors({
                    origin: this.frontendUrl
                }));
            }
            this._express.use(formidableMiddleware());
            this.setupMiddleware();
            if (this.environment != Environment.Development) {
                this.setupSessionSync();
            }
            // Get seller user id and seller app id
            if (this.environment == Environment.Development) {
                if (!(yield this.getDevelopmentAppInfo())) {
                    return Promise.reject("Failed to get app info");
                }
            }
            this.server = this._express.listen(this.listeningPort);
            console.log(`Listening on port ${this.listeningPort}`);
        });
    }
    setupMiddleware() {
        this._express.use((req, res, next) => {
            var _a, _b, _c, _d;
            if (this.environment == Environment.Development) {
                // Even if in development, we still need to set variables into express request context
                // so that we can check if db(), file(), app() are used outside of request context
                this._express.set('__seller_uuid__', this._sellerUserId);
                this._express.set('__seller_app_id__', this._sellerAppId);
                this.express.set('__user_uuid__', 'test_user_id');
                this.express.set('__user_name__', 'test_user_name');
            }
            else {
                this._express.set('__seller_uuid__', (_b = (_a = req.session) === null || _a === void 0 ? void 0 : _a.info) === null || _b === void 0 ? void 0 : _b.sellerUuid);
                this._express.set('__seller_app_id__', (_d = (_c = req.session) === null || _c === void 0 ? void 0 : _c.info) === null || _d === void 0 ? void 0 : _d.sellerAppId);
                this.express.set('__user_uuid__', req.session?.info?.userUuid)
                this.express.set('__user_name__', req.session?.info?.userName)
            }
            next();
        });
        // Initialize API
        const token = Buffer.from(`${this.clientId || ''}:${this.clientSecret || ''}`).toString('base64');
        this.axiosInstance = axios_1.default.create({
            baseURL: this.appServerUrl,
            headers: {
                'Authorization': `Bearer ${token}`,
            },
        });
    }
    setupSessionSync() {
        this._express.post(`/${this.randId}`, (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            if (!req.fields["id_token"] || !req.fields["seller_app_id"] || !req.fields["seller_uuid"]) {
                res.send({
                    code: -1,
                    error: 'Invalid parameters for session sync',
                });
                return;
            }
            // TODO: Should verify id_token with JWK Provider's public key
            const decoded = jwtDecode(req.fields["id_token"]);
            if (!decoded || !decoded.sub || !decoded.name) {
                res.send({
                    code: -1,
                    error: 'Invalid token for session sync',
                });
                return;
            }
            req.session.info = {
                userUuid: decoded.sub,
                userName: decoded.name,
                userEmail: decoded.email,
                sellerAppId: req.fields["seller_app_id"],
                sellerUuid: req.fields["seller_uuid"],
            };
            // for api access below
            this._express.set('__seller_uuid__', req.fields["seller_uuid"]);
            this._express.set('__seller_app_id__', req.fields["seller_app_id"]);
            const result = yield this.app.getBaseApp();
            res.send({
                code: 0,
                is_developing: result.isDeveloping
            });
        }));
    }
    getDevelopmentAppInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const result = yield this.axiosInstance.get('/sdk/development/app_info');
                this._baseAppId = result.data['app_id'];
                this._sellerAppId = result.data['seller_app_id'];
                this._sellerUserId = result.data['seller_user_id'];
                return true;
            }
            catch (e) {
                return false;
            }
        });
    }
}
exports.FanmeBackend = FanmeBackend;
