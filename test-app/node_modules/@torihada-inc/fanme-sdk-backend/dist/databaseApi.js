"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppContent = void 0;
const typescript_json_serializer_1 = require("typescript-json-serializer");
class DatabaseApi {
    constructor(axios, baseAppId, sellerUserId, sellerAppId) {
        this.serializer = new typescript_json_serializer_1.JsonSerializer();
        this.axios = axios;
        this.baseAppId = baseAppId;
        this.sellerUserId = sellerUserId;
        this.sellerAppId = sellerAppId;
    }
    /*
     * アプリケーションコンテンツ取得
     * 戻り値: コンテンツJSON
     */
    select(collection, condition) {
        return __awaiter(this, void 0, void 0, function* () {
            let Request = class Request {
                constructor(collectionName, condition) {
                    this.collectionName = collectionName;
                    this.condition = condition;
                }
            };
            Request = __decorate([
                (0, typescript_json_serializer_1.JsonObject)(),
                __param(0, (0, typescript_json_serializer_1.JsonProperty)({ name: "collection_name", required: true })),
                __param(1, (0, typescript_json_serializer_1.JsonProperty)({ name: "condition", required: true })),
                __metadata("design:paramtypes", [String, Object])
            ], Request);
            const request = new Request(collection, condition);
            return yield this.axios.post(`/sdk/${this.sellerUserId}/${this.sellerAppId}/content/get`, this.serializer.serialize(request))
                .then(res => {
                const r = this.serializer.deserializeObject(res.data, AppContent);
                return r !== null && r !== void 0 ? r : Promise.reject();
            })
                .catch(err => {
                return Promise.reject(err);
            });
        });
    }
    /*
   * アプリケーションコンテンツカウント
   * 戻り値: カウント
   */
    count(collection, condition) {
        return __awaiter(this, void 0, void 0, function* () {
            let Request = class Request {
                constructor(collectionName, condition) {
                    this.collectionName = collectionName;
                    this.condition = condition;
                }
            };
            Request = __decorate([
                (0, typescript_json_serializer_1.JsonObject)(),
                __param(0, (0, typescript_json_serializer_1.JsonProperty)({ name: "collection_name", required: true })),
                __param(1, (0, typescript_json_serializer_1.JsonProperty)({ name: "condition", required: true })),
                __metadata("design:paramtypes", [String, Object])
            ], Request);
            const request = new Request(collection, condition);
            return yield this.axios.post(`/sdk/${this.sellerUserId}/${this.sellerAppId}/content/count`, this.serializer.serialize(request))
                .then(res => {
                var _a;
                const r = this.serializer.deserializeObject(res.data, AppCount);
                return (_a = r === null || r === void 0 ? void 0 : r.count) !== null && _a !== void 0 ? _a : 0;
            })
                .catch(err => {
                return Promise.reject(err);
            });
        });
    }
    /*
     * アプリケーションコンテンツ作成
     * 戻り値: なし
     */
    insert(collection, contents) {
        return __awaiter(this, void 0, void 0, function* () {
            let Request = class Request {
                constructor(sellerAppId, collectionName, contents) {
                    this.sellerAppId = sellerAppId;
                    this.collectionName = collectionName;
                    this.contents = contents;
                }
            };
            Request = __decorate([
                (0, typescript_json_serializer_1.JsonObject)(),
                __param(0, (0, typescript_json_serializer_1.JsonProperty)({ name: "seller_app_id", required: true })),
                __param(1, (0, typescript_json_serializer_1.JsonProperty)({ name: "collection_name", required: true })),
                __param(2, (0, typescript_json_serializer_1.JsonProperty)({ name: "contents", required: true, type: (Array) })),
                __metadata("design:paramtypes", [Number, String, Array])
            ], Request);
            let RequestContent = class RequestContent {
                constructor(content, sellerAppItemPriceId) {
                    this.content = content;
                    this.sellerAppItemPriceId = sellerAppItemPriceId;
                }
            };
            RequestContent = __decorate([
                (0, typescript_json_serializer_1.JsonObject)(),
                __param(0, (0, typescript_json_serializer_1.JsonProperty)({ name: "content", required: true })),
                __param(1, (0, typescript_json_serializer_1.JsonProperty)({ name: "seller_app_item_price_id" })),
                __metadata("design:paramtypes", [Object, Number])
            ], RequestContent);
            const request = new Request(this.sellerAppId, collection, contents.map((value) => {
                return new RequestContent(value.content, value.sellerAppItemPriceId);
            }));
            return yield this.axios.post(`/sdk/${this.sellerUserId}/${this.sellerAppId}/content/create`, this.serializer.serialize(request))
                .then(res => {
                return;
            })
                .catch(err => {
                return Promise.reject(err);
            });
        });
    }
    /*
    * アプリケーションコンテンツ更新
    * 戻り値: なし
    */
    update(collection, condition, content) {
        return __awaiter(this, void 0, void 0, function* () {
            let Request = class Request {
                constructor(sellerAppId, collectionName, condition, content) {
                    this.sellerAppId = sellerAppId;
                    this.collectionName = collectionName;
                    this.condition = condition;
                    this.content = content;
                }
            };
            Request = __decorate([
                (0, typescript_json_serializer_1.JsonObject)(),
                __param(0, (0, typescript_json_serializer_1.JsonProperty)({ name: "seller_app_id", required: true })),
                __param(1, (0, typescript_json_serializer_1.JsonProperty)({ name: "collection_name", required: true })),
                __param(2, (0, typescript_json_serializer_1.JsonProperty)({ name: "condition", required: true })),
                __param(3, (0, typescript_json_serializer_1.JsonProperty)({ name: "content", required: true })),
                __metadata("design:paramtypes", [Number, String, Object, Object])
            ], Request);
            const request = new Request(this.sellerAppId, collection, condition, content);
            return yield this.axios.post(`/sdk/${this.sellerUserId}/${this.sellerAppId}/content/update`, this.serializer.serialize(request))
                .then(res => {
                return;
            })
                .catch(err => {
                return Promise.reject(err);
            });
        });
    }
    /*
    * アプリケーションコンテンツ削除
    * 戻り値: なし
    */
    delete(collection, condition) {
        return __awaiter(this, void 0, void 0, function* () {
            let Request = class Request {
                constructor(sellerAppId, collectionName, condition) {
                    this.sellerAppId = sellerAppId;
                    this.collectionName = collectionName;
                    this.condition = condition;
                }
            };
            Request = __decorate([
                (0, typescript_json_serializer_1.JsonObject)(),
                __param(0, (0, typescript_json_serializer_1.JsonProperty)({ name: "seller_app_id", required: true })),
                __param(1, (0, typescript_json_serializer_1.JsonProperty)({ name: "collection_name", required: true })),
                __param(2, (0, typescript_json_serializer_1.JsonProperty)({ name: "condition", required: true })),
                __metadata("design:paramtypes", [Number, String, Object])
            ], Request);
            const request = new Request(this.sellerAppId, collection, condition);
            return yield this.axios.post(`/sdk/${this.sellerUserId}/${this.sellerAppId}/content/delete`, this.serializer.serialize(request))
                .then(res => {
                return;
            })
                .catch(err => {
                return Promise.reject(err);
            });
        });
    }
}
exports.default = DatabaseApi;
let AppContent = class AppContent {
    constructor(sellerAppId, baseAppId, contentData) {
        this.sellerAppId = sellerAppId;
        this.baseAppId = baseAppId;
        this.contentData = contentData;
    }
};
AppContent = __decorate([
    (0, typescript_json_serializer_1.JsonObject)(),
    __param(0, (0, typescript_json_serializer_1.JsonProperty)({ name: "seller_app_id", required: true })),
    __param(1, (0, typescript_json_serializer_1.JsonProperty)({ name: "app_id", required: true })),
    __param(2, (0, typescript_json_serializer_1.JsonProperty)({ name: "content_data", required: true })),
    __metadata("design:paramtypes", [Number, Number, Object])
], AppContent);
exports.AppContent = AppContent;
let AppCount = class AppCount {
    constructor(sellerAppId, baseAppId, count) {
        this.sellerAppId = sellerAppId;
        this.baseAppId = baseAppId;
        this.count = count;
    }
};
AppCount = __decorate([
    (0, typescript_json_serializer_1.JsonObject)(),
    __param(0, (0, typescript_json_serializer_1.JsonProperty)({ name: "seller_app_id", required: true })),
    __param(1, (0, typescript_json_serializer_1.JsonProperty)({ name: "app_id", required: true })),
    __param(2, (0, typescript_json_serializer_1.JsonProperty)({ name: "count", required: true })),
    __metadata("design:paramtypes", [Number, Number, Number])
], AppCount);
