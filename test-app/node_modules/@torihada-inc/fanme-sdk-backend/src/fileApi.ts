import {JsonObject, JsonProperty, JsonSerializer} from "typescript-json-serializer";
import {AxiosInstance, AxiosProgressEvent} from "axios"
import FormData = require("form-data")

export default class FileApi {
  private multipartConfig = {}
  private serializer = new JsonSerializer();
  private readonly baseAppId: number
  private readonly sellerAppId: number
  private readonly sellerUserId: string
  private axios: AxiosInstance

  constructor(axios: AxiosInstance, baseAppId: number, sellerUserId: string, sellerAppId: number) {
    this.axios = axios
    this.baseAppId = baseAppId
    this.sellerUserId = sellerUserId
    this.sellerAppId = sellerAppId
  }

  /*
   * ファイル保存
   * 戻り値: コンテンツJSON
   */
  public async save(
    file: Buffer,
    filename: string,
    isPublic: boolean,
    onProgress?: ((event: AxiosProgressEvent) => {})
  ): Promise<any> {
    const formData = new FormData()
    formData.append("file", file, {
      filename: filename,
      filepath: '/',
      contentType: 'image/png'
    })

    const url = isPublic ?
      `/sdk/${this.sellerUserId}/${this.sellerAppId}/public_blob/create`
      :
      `/sdk/${this.sellerUserId}/${this.sellerAppId}/blob/create`
    return await this.axios.postForm(
      url,
      formData,
      {
        headers: {'content-type': 'multipart/form-data'},
        onUploadProgress: onProgress
      }
    )
      .then(res => {
        const r = this.serializer.deserializeObject(res.data, Blog)
        return r ?? Promise.reject()
      })
      .catch(err => {
        return Promise.reject(err)
      })
  }

  // /*
  // * ファイル更新
  // * 戻り値: なし
  // */
  // public async update(
  //   file: File,
  //   key: string
  // ): Promise<any> {
  //   const formData = new FormData()
  //   formData.append("file", file)
  //   formData.append("key", key)
  //
  //   return await this.axios.post(
  //     `/sdk/${this.userId}/${this.appId}/blob/update`,
  //     formData,
  //     this.multipartConfig
  //   )
  //     .then(res => {
  //       const r = this.serializer.deserializeObject(res.data, Blog)
  //       return r ?? Promise.reject()
  //     })
  //     .catch(err => {
  //       return Promise.reject(err)
  //     })
  // }

  /*
  * ファイル削除
  * 戻り値: なし
  */
  public async delete(
    key: string
  ): Promise<void> {
    return await this.axios.post(
      `/sdk/${this.sellerUserId}/${this.sellerAppId}/blob/delete`,
      {key: key}
    )
      .then(res => {
        return
      })
      .catch(err => {
        return Promise.reject(err)
      })
  }

  /*
  * ファイル取得
  * 戻り値: なし
  */
  public async getSignedUrl(
    key: string
  ): Promise<any> {
    return await this.axios.post(
      `/sdk/${this.sellerUserId}/${this.sellerAppId}/blob/get`,
      {key: key}
    )
      .then(res => {
        const r = this.serializer.deserializeObject(res.data, Blog)
        return r ?? Promise.reject()
      })
      .catch(err => {
        return Promise.reject(err)
      })
  }
}

@JsonObject()
export class Blog {
  constructor(
    @JsonProperty({name: "key", required: true})
    public key?: string,
    @JsonProperty({name: "url", required: true})
    public url?: string,
  ) {
  }
}
