import {JsonObject, JsonProperty, JsonSerializer} from "typescript-json-serializer";
import {AxiosInstance} from "axios";

export default class DatabaseApi {
  private serializer = new JsonSerializer();
  private readonly baseAppId: number
  private readonly sellerAppId: number
  private readonly sellerUserId: string
  private axios: AxiosInstance

  constructor(axios: AxiosInstance, baseAppId: number, sellerUserId: string, sellerAppId: number) {
    this.axios = axios
    this.baseAppId = baseAppId
    this.sellerUserId = sellerUserId
    this.sellerAppId = sellerAppId
  }

  /*
   * アプリケーションコンテンツ取得
   * 戻り値: コンテンツJSON
   */
  public async select(
    collection: string,
    condition: object
  ): Promise<any> {

    @JsonObject()
    class Request {
      constructor(
        @JsonProperty({name: "collection_name", required: true})
        public collectionName?: string,
        @JsonProperty({name: "condition", required: true})
        public condition?: object,
      ) {
      }
    }

    const request = new Request(
      collection,
      condition
    )

    return await this.axios.post(
      `/sdk/${this.sellerUserId}/${this.sellerAppId}/content/get`,
      this.serializer.serialize(request)
    )
      .then(res => {
        const r = this.serializer.deserializeObject(res.data, AppContent)
        return r ?? Promise.reject()
      })
      .catch(err => {
        return Promise.reject(err)
      })
  }

  /*
 * アプリケーションコンテンツカウント
 * 戻り値: カウント
 */
  public async count(
    collection: string,
    condition: object
  ): Promise<number> {

    @JsonObject()
    class Request {
      constructor(
        @JsonProperty({name: "collection_name", required: true})
        public collectionName?: string,
        @JsonProperty({name: "condition", required: true})
        public condition?: object,
      ) {
      }
    }

    const request = new Request(
      collection,
      condition
    )

    return await this.axios.post(
      `/sdk/${this.sellerUserId}/${this.sellerAppId}/content/count`,
      this.serializer.serialize(request)
    )
      .then(res => {
        const r = this.serializer.deserializeObject(res.data, AppCount)
        return r?.count ?? 0
      })
      .catch(err => {
        return Promise.reject(err)
      })
  }

  /*
   * アプリケーションコンテンツ作成
   * 戻り値: なし
   */
  public async insert(
    collection: string,
    contents: Array<{
      content: object,
      sellerAppItemPriceId?: number,
    }>,
  ): Promise<void> {

    @JsonObject()
    class Request {
      constructor(
        @JsonProperty({name: "seller_app_id", required: true})
        public sellerAppId?: number,
        @JsonProperty({name: "collection_name", required: true})
        public collectionName?: string,
        @JsonProperty({name: "contents", required: true, type: Array<RequestContent>})
        public contents?: Array<RequestContent>,
      ) {
      }
    }

    @JsonObject()
    class RequestContent {
      constructor(
        @JsonProperty({name: "content", required: true})
        public content?: object,
        @JsonProperty({name: "seller_app_item_price_id"})
        public sellerAppItemPriceId?: number,
      ) {
      }
    }

    const request = new Request(
      this.sellerAppId,
      collection,
      contents.map((value) => {
        return new RequestContent(
          value.content,
          value.sellerAppItemPriceId
        )
      })
    )

    return await this.axios.post(
      `/sdk/${this.sellerUserId}/${this.sellerAppId}/content/create`,
      this.serializer.serialize(request)
    )
      .then(res => {
        return
      })
      .catch(err => {
        return Promise.reject(err)
      })
  }

  /*
  * アプリケーションコンテンツ更新
  * 戻り値: なし
  */
  public async update(
    collection: string,
    condition: object,
    content: object,
  ): Promise<void> {

    @JsonObject()
    class Request {
      constructor(
        @JsonProperty({name: "seller_app_id", required: true})
        public sellerAppId?: number,
        @JsonProperty({name: "collection_name", required: true})
        public collectionName?: string,
        @JsonProperty({name: "condition", required: true})
        public condition?: object,
        @JsonProperty({name: "content", required: true})
        public content?: object,
      ) {
      }
    }

    const request = new Request(
      this.sellerAppId,
      collection,
      condition,
      content
    )

    return await this.axios.post(
      `/sdk/${this.sellerUserId}/${this.sellerAppId}/content/update`,
      this.serializer.serialize(request)
    )
      .then(res => {
        return
      })
      .catch(err => {
        return Promise.reject(err)
      })
  }

  /*
  * アプリケーションコンテンツ削除
  * 戻り値: なし
  */
  public async delete(
    collection: string,
    condition: object,
  ): Promise<void> {

    @JsonObject()
    class Request {
      constructor(
        @JsonProperty({name: "seller_app_id", required: true})
        public sellerAppId?: number,
        @JsonProperty({name: "collection_name", required: true})
        public collectionName?: string,
        @JsonProperty({name: "condition", required: true})
        public condition?: object,
      ) {
      }
    }

    const request = new Request(
      this.sellerAppId,
      collection,
      condition
    )

    return await this.axios.post(
      `/sdk/${this.sellerUserId}/${this.sellerAppId}/content/delete`,
      this.serializer.serialize(request)
    )
      .then(res => {
        return
      })
      .catch(err => {
        return Promise.reject(err)
      })
  }

}

@JsonObject()
export class AppContent {
  constructor(
    @JsonProperty({name: "seller_app_id", required: true})
    public sellerAppId?: number,
    @JsonProperty({name: "app_id", required: true})
    public baseAppId?: number,
    @JsonProperty({name: "content_data", required: true})
    public contentData?: object,
  ) {
  }
}

@JsonObject()
class AppCount {
  constructor(
    @JsonProperty({name: "seller_app_id", required: true})
    public sellerAppId?: number,
    @JsonProperty({name: "app_id", required: true})
    public baseAppId?: number,
    @JsonProperty({name: "count", required: true})
    public count?: number,
  ) {
  }
}
