"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.FanmeBackend = void 0;
var express_1 = require("express");
var axios_1 = require("axios");
var databaseApi_1 = require("./databaseApi");
var fileApi_1 = require("./fileApi");
var appApi_1 = require("./appApi");
var cors = require('cors');
var formidableMiddleware = require('express-formidable');
var jwtDecode = require('jwt-decode');
var cookieSession = require('cookie-session');
var Environment;
(function (Environment) {
    Environment["Development"] = "development";
    Environment["Staging"] = "staging";
    Environment["Production"] = "production";
})(Environment || (Environment = {}));
var FanmeBackend = /** @class */ (function () {
    function FanmeBackend(portNumber) {
        if (portNumber === void 0) { portNumber = 3000; }
        this.frontendUrl = process.env["__FANME_MINIAPP_FRONTEND_URL__"] || process.env["FANME_FRONTEND_URL"];
        this.backendUrl = process.env["__FANME_MINIAPP_BACKEND_URL__"] || process.env["FANME_BACKEND_URL"];
        this.randId = process.env["__FANME_MINIAPP_RAND__"];
        this.clientId = process.env["__FANME_MINIAPP_CLIENT_ID__"] || process.env["FANME_CLIENT_ID"];
        this.clientSecret = process.env["__FANME_MINIAPP_CLIENT_SECRET__"] || process.env["FANME_CLIENT_SECRET"];
        this.listeningPort = portNumber;
        this.appServerUrl = process.env["__FANME_MINIAPP_APP_SERVER_URL__"] || 'https://app.fanme.link';
    }
    Object.defineProperty(FanmeBackend.prototype, "express", {
        get: function () {
            return this._express;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FanmeBackend.prototype, "baseAppId", {
        get: function () {
            if (this.environment == Environment.Development) {
                return this._baseAppId;
            }
            else {
                return parseInt(process.env["__FANME_MINIAPP_APP_ID__"] || '') || 0;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FanmeBackend.prototype, "sellerUserId", {
        get: function () {
            return this._express.get("__seller_uuid__") || '';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FanmeBackend.prototype, "sellerAppId", {
        get: function () {
            return this._express.get("__seller_app_id__") || 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FanmeBackend.prototype, "userId", {
        get: function () {
            return this._express.get("__user_uuid__") || '';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FanmeBackend.prototype, "userName", {
        get: function () {
            return this._express.get("__user_name__") || '';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FanmeBackend.prototype, "db", {
        get: function () {
            if (this.baseAppId == 0 || this.sellerUserId == '' || this.sellerAppId == 0) {
                console.log("db object cannot be used outside of request context");
                console.log("Shutdown server");
                process.exit(-1);
            }
            return new databaseApi_1["default"](this.axiosInstance, this.baseAppId, this.sellerUserId, this.sellerAppId);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FanmeBackend.prototype, "file", {
        get: function () {
            if (this.baseAppId == 0 || this.sellerUserId == '' || this.sellerAppId == 0) {
                console.log("file object cannot be used outside of request context");
                console.log("Shutdown server");
                process.exit(-1);
            }
            return new fileApi_1["default"](this.axiosInstance, this.baseAppId, this.sellerUserId, this.sellerAppId);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FanmeBackend.prototype, "app", {
        get: function () {
            if (this.baseAppId == 0 || this.sellerUserId == '' || this.sellerAppId == 0) {
                console.log("app object cannot be used outside of request context");
                console.log("Shutdown server");
                process.exit(-1);
            }
            return new appApi_1["default"](this.axiosInstance, this.baseAppId, this.sellerUserId, this.sellerAppId);
        },
        enumerable: false,
        configurable: true
    });
    FanmeBackend.prototype.init = function () {
        return __awaiter(this, void 0, void 0, function () {
            var e;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        e = process.env["__FANME_MINIAPP_ENV__"];
                        switch (e) {
                            case "production":
                                this.environment = Environment.Production;
                                break;
                            case "staging":
                                this.environment = Environment.Staging;
                                break;
                            default:
                                this.environment = Environment.Development;
                                break;
                        }
                        console.log("Initializing: ".concat(this.environment, " environment"));
                        if (this.environment == Environment.Development) {
                            if (!this.frontendUrl) {
                                return [2 /*return*/, Promise.reject("Missing FANME_FRONTEND_URL environment variable")];
                            }
                            if (!this.backendUrl) {
                                return [2 /*return*/, Promise.reject("Missing FANME_BACKEND_URL environment variable")];
                            }
                            if (!this.clientId) {
                                return [2 /*return*/, Promise.reject("Missing FANME_CLIENT_ID environment variable")];
                            }
                            if (!this.clientSecret) {
                                return [2 /*return*/, Promise.reject("Missing FANME_CLIENT_SECRET environment variable")];
                            }
                        }
                        this._express = (0, express_1["default"])();
                        this._express.set('trust proxy', 1);
                        this._express.use(cookieSession({
                            name: 'ma-sess',
                            keys: ['fanme-miniapp'],
                            cookie: { maxAge: 60 * 60 * 24 * 365 }
                        }));
                        if (this.frontendUrl) {
                            this._express.use(cors({
                                origin: this.frontendUrl
                            }));
                        }
                        this._express.use(formidableMiddleware());
                        this.setupMiddleware();
                        if (this.environment != Environment.Development) {
                            this.setupSessionSync();
                        }
                        if (!(this.environment == Environment.Development)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.getDevelopmentAppInfo()];
                    case 1:
                        if (!(_a.sent())) {
                            return [2 /*return*/, Promise.reject("Failed to get app info")];
                        }
                        _a.label = 2;
                    case 2:
                        this.server = this._express.listen(this.listeningPort);
                        console.log("Listening on port ".concat(this.listeningPort));
                        return [2 /*return*/];
                }
            });
        });
    };
    FanmeBackend.prototype.setupMiddleware = function () {
        var _this = this;
        this._express.use(function (req, res, next) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            if (_this.environment == Environment.Development) {
                // Even if in development, we still need to set variables into express request context
                // so that we can check if db(), file(), app() are used outside of request context
                _this._express.set('__seller_uuid__', _this._sellerUserId);
                _this._express.set('__seller_app_id__', _this._sellerAppId);
                _this.express.set('__user_uuid__', 'test-user-id');
                _this.express.set('__user_name__', 'test-user-name');
            }
            else {
                _this._express.set('__seller_uuid__', (_b = (_a = req.session) === null || _a === void 0 ? void 0 : _a.info) === null || _b === void 0 ? void 0 : _b.sellerUuid);
                _this._express.set('__seller_app_id__', (_d = (_c = req.session) === null || _c === void 0 ? void 0 : _c.info) === null || _d === void 0 ? void 0 : _d.sellerAppId);
                _this.express.set('__user_uuid__', (_f = (_e = req.session) === null || _e === void 0 ? void 0 : _e.info) === null || _f === void 0 ? void 0 : _f.userUuid);
                _this.express.set('__user_name__', (_h = (_g = req.session) === null || _g === void 0 ? void 0 : _g.info) === null || _h === void 0 ? void 0 : _h.userName);
            }
            next();
        });
        // Initialize API
        var token = Buffer.from("".concat(this.clientId || '', ":").concat(this.clientSecret || '')).toString('base64');
        this.axiosInstance = axios_1["default"].create({
            baseURL: this.appServerUrl,
            headers: {
                'Authorization': "Bearer ".concat(token)
            }
        });
    };
    FanmeBackend.prototype.setupSessionSync = function () {
        var _this = this;
        this._express.post("/".concat(this.randId), function (req, res, next) { return __awaiter(_this, void 0, void 0, function () {
            var decoded, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!req.fields["id_token"] || !req.fields["seller_app_id"] || !req.fields["seller_uuid"]) {
                            res.send({
                                code: -1,
                                error: 'Invalid parameters for session sync'
                            });
                            return [2 /*return*/];
                        }
                        decoded = jwtDecode(req.fields["id_token"]);
                        if (!decoded || !decoded.sub || !decoded.name) {
                            res.send({
                                code: -1,
                                error: 'Invalid token for session sync'
                            });
                            return [2 /*return*/];
                        }
                        req.session.info = {
                            userUuid: decoded.sub,
                            userName: decoded.name,
                            userEmail: decoded.email,
                            sellerAppId: req.fields["seller_app_id"],
                            sellerUuid: req.fields["seller_uuid"]
                        };
                        // for api access below
                        this._express.set('__seller_uuid__', req.fields["seller_uuid"]);
                        this._express.set('__seller_app_id__', req.fields["seller_app_id"]);
                        return [4 /*yield*/, this.app.getBaseApp()];
                    case 1:
                        result = _a.sent();
                        res.send({
                            code: 0,
                            is_developing: result.isDeveloping
                        });
                        return [2 /*return*/];
                }
            });
        }); });
    };
    FanmeBackend.prototype.getDevelopmentAppInfo = function () {
        return __awaiter(this, void 0, void 0, function () {
            var result, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.axiosInstance.get('/sdk/development/app_info')];
                    case 1:
                        result = _a.sent();
                        this._baseAppId = result.data['app_id'];
                        this._sellerAppId = result.data['seller_app_id'];
                        this._sellerUserId = result.data['seller_user_id'];
                        return [2 /*return*/, true];
                    case 2:
                        e_1 = _a.sent();
                        return [2 /*return*/, false];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return FanmeBackend;
}());
exports.FanmeBackend = FanmeBackend;
