import express, {Application, NextFunction, Request, Response} from 'express'
import axios, {AxiosBasicCredentials, AxiosInstance} from "axios";
import DatabaseApi from "./databaseApi"
import FileApi from "./fileApi"
import AppApi from "./appApi"
import * as http from "http";

const cors = require('cors')
const formidableMiddleware = require('express-formidable');
const jwtDecode = require('jwt-decode')
const cookieSession = require('cookie-session')

enum Environment {
  Development = "development",
  Staging = "staging",
  Production = "production",
}

export class FanmeBackend {
  private _express: Application
  public get express(): Application {
    return this._express
  }

  private server: http.Server
  private environment: Environment
  private frontendUrl?: string
  private backendUrl?: string
  private randId?: string
  private clientId?: string
  private clientSecret?: string
  private appServerUrl?: string
  private listeningPort: number

  // for development
  private _baseAppId: number
  private _sellerUserId: string
  private _sellerAppId: number
  private _userUuid: string
  private _userName: string
  private axiosInstance: AxiosInstance

  private get baseAppId(): number {
    if (this.environment == Environment.Development) {
      return this._baseAppId
    } else {
      return parseInt(process.env["__FANME_MINIAPP_APP_ID__"] || '') || 0
    }
  }

  private get sellerUserId(): string {
    return this._express.get("__seller_uuid__") || ''
  }

  private get sellerAppId(): number {
    return this._express.get("__seller_app_id__") || 0
  }

  private get userUuId(): string {
    return this._express.get("__user_uuid__") || ''
  }
  
  private get userName(): string {
    return this._express.get("__user_name__") || ''
  }

  public get db(): DatabaseApi {
    if (this.baseAppId == 0 || this.sellerUserId == '' || this.sellerAppId == 0) {
      console.log("db object cannot be used outside of request context")
      console.log("Shutdown server")
      process.exit(-1)
    }
    return new DatabaseApi(this.axiosInstance, this.baseAppId, this.sellerUserId, this.sellerAppId)
  }

  public get file(): FileApi {
    if (this.baseAppId == 0 || this.sellerUserId == '' || this.sellerAppId == 0) {
      console.log("file object cannot be used outside of request context")
      console.log("Shutdown server")
      process.exit(-1)
    }
    return new FileApi(this.axiosInstance, this.baseAppId, this.sellerUserId, this.sellerAppId)
  }

  public get app(): AppApi {
    if (this.baseAppId == 0 || this.sellerUserId == '' || this.sellerAppId == 0) {
      console.log("app object cannot be used outside of request context")
      console.log("Shutdown server")
      process.exit(-1)
    }
    return new AppApi(this.axiosInstance, this.baseAppId, this.sellerUserId, this.sellerAppId)
  }

  constructor(portNumber: number = 3000) {
    this.frontendUrl = process.env["__FANME_MINIAPP_FRONTEND_URL__"] || process.env["FANME_FRONTEND_URL"]
    this.backendUrl = process.env["__FANME_MINIAPP_BACKEND_URL__"] || process.env["FANME_BACKEND_URL"]
    this.randId = process.env["__FANME_MINIAPP_RAND__"]
    this.clientId = process.env["__FANME_MINIAPP_CLIENT_ID__"] || process.env["FANME_CLIENT_ID"]
    this.clientSecret = process.env["__FANME_MINIAPP_CLIENT_SECRET__"] || process.env["FANME_CLIENT_SECRET"]

    this.listeningPort = portNumber
    this.appServerUrl = process.env["__FANME_MINIAPP_APP_SERVER_URL__"] || 'https://app.fanme.link'
  }

  public async init() {
    const e = process.env["__FANME_MINIAPP_ENV__"]
    switch (e) {
      case "production":
        this.environment = Environment.Production
        break
      case "staging":
        this.environment = Environment.Staging
        break
      default:
        this.environment = Environment.Development
        break
    }

    console.log(`Initializing: ${this.environment} environment`)

    if (this.environment == Environment.Development) {
      if (!this.frontendUrl) {
        return Promise.reject("Missing FANME_FRONTEND_URL environment variable")
      }
      if (!this.backendUrl) {
        return Promise.reject("Missing FANME_BACKEND_URL environment variable")
      }
      if (!this.clientId) {
        return Promise.reject("Missing FANME_CLIENT_ID environment variable")
      }
      if (!this.clientSecret) {
        return Promise.reject("Missing FANME_CLIENT_SECRET environment variable")
      }
    }

    this._express = express()
    this._express.set('trust proxy', 1)

    this._express.use(cookieSession({
      name: 'ma-sess',
      keys: ['fanme-miniapp'],
      cookie: {maxAge: 60 * 60 * 24 * 365}
    }))

    if (this.frontendUrl) {
      this._express.use(cors({
        origin: this.frontendUrl
      }))
    }
    this._express.use(formidableMiddleware())

    this.setupMiddleware()

    if (this.environment != Environment.Development) {
      this.setupSessionSync()
    }

    // Get seller user id and seller app id
    if (this.environment == Environment.Development) {
      if (!await this.getDevelopmentAppInfo()) {
        return Promise.reject("Failed to get app info")
      }
    }

    this.server = this._express.listen(this.listeningPort)

    console.log(`Listening on port ${this.listeningPort}`)
  }

  private setupMiddleware() {
    this._express.use((req: Request, res: Response, next: NextFunction) => {
      if (this.environment == Environment.Development) {
        // Even if in development, we still need to set variables into express request context
        // so that we can check if db(), file(), app() are used outside of request context
        this._express.set('__seller_uuid__', this._sellerUserId)
        this._express.set('__seller_app_id__', this._sellerAppId)
        this.express.set('__user_uuid__', 'test-user-id');
        this.express.set('__user_name__', 'test-user-name');
      } else {
        this._express.set('__seller_uuid__', req.session?.info?.sellerUuid)
        this._express.set('__seller_app_id__', req.session?.info?.sellerAppId)
        this.express.set('__user_uuid__', req.session?.info?.userUuid)
        this.express.set('__user_name__', req.session?.info?.userName)
      }

      next()
    })

    // Initialize API
    const token = Buffer.from(`${this.clientId || ''}:${this.clientSecret || ''}`).toString('base64')
    this.axiosInstance = axios.create({
      baseURL: this.appServerUrl,
      headers: {
        'Authorization': `Bearer ${token}`,
      },
    })
  }

  private setupSessionSync() {
    this._express.post(`/${this.randId}`, async (req: Request, res: Response, next: NextFunction) => {
      if (!req.fields["id_token"] || !req.fields["seller_app_id"] || !req.fields["seller_uuid"]) {
        res.send({
          code: -1,
          error: 'Invalid parameters for session sync',
        })
        return
      }

      // TODO: Should verify id_token with JWK Provider's public key
      const decoded = jwtDecode(req.fields["id_token"]);
      if (!decoded || !decoded.sub || !decoded.name) {
        res.send({
          code: -1,
          error: 'Invalid token for session sync',
        })
        return
      }

      req.session.info = {
        userUuid: decoded.sub,
        userName: decoded.name,
        userEmail: decoded.email,
        sellerAppId: req.fields["seller_app_id"],
        sellerUuid: req.fields["seller_uuid"],
      }

      // for api access below
      this._express.set('__seller_uuid__', req.fields["seller_uuid"])
      this._express.set('__seller_app_id__', req.fields["seller_app_id"])

      const result = await this.app.getBaseApp()

      res.send({
        code: 0,
        is_developing: result.isDeveloping
      })
    })
  }

  private async getDevelopmentAppInfo(): Promise<Boolean> {
    try {
      const result = await this.axiosInstance.get('/sdk/development/app_info')
      this._baseAppId = result.data['app_id']
      this._sellerAppId = result.data['seller_app_id']
      this._sellerUserId = result.data['seller_user_id']

      return true
    } catch (e) {
      return false
    }
  }
}
