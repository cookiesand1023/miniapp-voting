import {isNullish, JsonObject, JsonProperty, JsonSerializer} from "typescript-json-serializer";
import {AxiosInstance} from "axios";

export declare type Nullish = null | undefined;

export function notNullish<T>(item: T | Nullish): item is T {
  return !isNullish(item)
}

export default class AppApi {
  private multipartConfig = {headers: {'content-type': 'multipart/form-data'}}
  private serializer = new JsonSerializer();
  private readonly baseAppId: number
  private readonly sellerAppId: number
  private readonly sellerUserId: string
  private axios: AxiosInstance

  constructor(axios: AxiosInstance, baseAppId: number, sellerUserId: string, sellerAppId: number) {
    this.axios = axios
    this.baseAppId = baseAppId
    this.sellerUserId = sellerUserId
    this.sellerAppId = sellerAppId
  }

  // /*
  //  * アプリケーション取得
  //  * 戻り値: 開発者の登録したアプリケーション
  //  */
  // public async getApps(): Promise<Array<any>> {
  //     return await this.axios.get(`/sdk/${this.sellerUserId}/available`)
  //         .then(res => {
  //             const r = this.serializer.deserializeObjectArray(res.data, GetAppResponse)
  //             return r?.filter(notNullish) ?? Promise.reject()
  //         })
  //         .catch(err => {
  //             return Promise.reject(err)
  //         })
  // }

  /*
   * アプリケーション取得
   * 戻り値: 開発者の登録したアプリケーション
   */
  public async getBaseApp(): Promise<BaseApp> {
    return await this.axios.get(`/sdk/${this.sellerUserId}/available/${this.baseAppId}`)
      .then(res => {
        const r = this.serializer.deserializeObject(res.data, BaseApp)
        return r ?? Promise.reject()
      })
      .catch(err => {
        return Promise.reject(err)
      })
  }

  /*
   * アプリケーション商品取得
   * 戻り値: 開発者の登録したアプリケーション商品
   */
  public async getBaseAppItems(): Promise<Array<BaseAppItem>> {
    return await this.axios.get(`/sdk/${this.sellerUserId}/available/${this.baseAppId}/items`)
      .then(res => {
        const r = this.serializer.deserializeObjectArray(res.data, BaseAppItem)
        return r?.filter(notNullish) ?? Promise.reject()
      })
      .catch(err => {
        return Promise.reject(err)
      })
  }

  // /*
  //  * アプリケーション取得
  //  * 戻り値: 自分の登録したアプリケーション
  //  */
  // public async getMyApps(): Promise<Array<GetSellerAppResponse>> {
  //     return await this.axios.get(`/sdk/${this.sellerUserId}/mine`)
  //         .then(res => {
  //             const r = this.serializer.deserializeObjectArray(res.data, GetSellerAppResponse)
  //             return r?.filter(notNullish) ?? Promise.reject()
  //         })
  //         .catch(err => {
  //             return Promise.reject(err)
  //         })
  // }

  /*
   * アプリケーション取得
   * 戻り値: 自分の登録したアプリケーション
   */
  public async getSellerApp(): Promise<SellerApp> {
    return await this.axios.get(`/sdk/${this.sellerUserId}/mine/${this.sellerAppId}`)
      .then(res => {
        const r = this.serializer.deserializeObject(res.data, SellerApp)
        return r ?? Promise.reject()
      })
      .catch(err => {
        return Promise.reject(err)
      })
  }

  /*
   * アプリケーション商品取得
   * 戻り値: 自分の登録したアプリケーション
   */
  public async getSellerAppItems(): Promise<Array<SellerAppItem>> {
    return await this.axios.get(`/sdk/${this.sellerUserId}/${this.sellerAppId}/items`)
      .then(res => {
        const r = this.serializer.deserializeObjectArray(res.data, SellerAppItem)
        return r?.filter(notNullish) ?? Promise.reject()
      })
      .catch(err => {
        return Promise.reject(err)
      })
  }


  /*
   * アプリケーション商品取得
   * 戻り値: 自分の登録したアプリケーション
   */
  public async getSellerAppItem(sellerAppItemId: number): Promise<SellerAppItem> {
    return await this.axios.get(`/sdk/${this.sellerUserId}/${this.sellerAppId}/items/${sellerAppItemId}`)
      .then(res => {
        const r = this.serializer.deserializeObject(res.data, SellerAppItem)
        return r ?? Promise.reject()
      })
      .catch(err => {
        return Promise.reject(err)
      })
  }

  /*
   * アプリケーション商品新規作成
   * 戻り値: 作成したsellerAppId
   */
  public async createSellerAppItem(
    baseAppItemId: number,
    name: string,
    sortOrder: number,
    shortName?: string,
    description?: string,
    iconUrl?: string,
    imageUrl1?: string,
    imageUrl2?: string,
    imageUrl3?: string,
    imageUrl4?: string,
    imageUrl5?: string,
    available: boolean = true,
  ): Promise<SellerAppItemId> {

    @JsonObject()
    class Request {
      constructor(
        @JsonProperty({name: "app_item_id", required: true})
        public baseAppItemId?: number,
        @JsonProperty({name: "seller_app_id", required: true})
        public sellerAppId?: number,
        @JsonProperty({name: "name", required: true})
        public name?: string,
        @JsonProperty({name: "description"})
        public description?: string,
        @JsonProperty({name: "icon_url"})
        public iconUrl?: string,
        @JsonProperty({name: "image_url1"})
        public imageUrl1?: string,
        @JsonProperty({name: "image_url2"})
        public imageUrl2?: string,
        @JsonProperty({name: "image_url3"})
        public imageUrl3?: string,
        @JsonProperty({name: "image_url4"})
        public imageUrl4?: string,
        @JsonProperty({name: "image_url5"})
        public imageUrl5?: string,
        @JsonProperty({name: "sort_order", required: true})
        public sortOrder?: number,
        @JsonProperty({name: "available", required: true})
        public available?: boolean,
      ) {
      }
    }

    const request = new Request(
      baseAppItemId,
      this.sellerAppId,
      name,
      description,
      iconUrl,
      imageUrl1,
      imageUrl2,
      imageUrl3,
      imageUrl4,
      imageUrl5,
      sortOrder,
      available,
    )
    return await this.axios.post(
      `/sdk/${this.sellerUserId}/${this.sellerAppId}/items/register`,
      this.serializer.serialize(request)
    )
      .then(res => {
        const r = this.serializer.deserializeObject(res.data, SellerAppItemId)
        return r ?? Promise.reject()
      })
      .catch(err => {
        return Promise.reject(err)
      })
  }

  /*
   * アプリケーション商品更新
   * 戻り値: なし
   */
  public async updateSellerAppItem(
    sellerAppItemId: number,
    name?: string,
    sortOrder?: number,
    shortName?: string,
    description?: string,
    iconUrl?: string,
    imageUrl1?: string,
    imageUrl2?: string,
    imageUrl3?: string,
    imageUrl4?: string,
    imageUrl5?: string,
    available?: boolean,
  ): Promise<SellerAppItemId> {

    @JsonObject()
    class Request {
      constructor(
        @JsonProperty({name: "seller_app_item_id", required: true})
        public sellerAppItemId?: number,
        @JsonProperty({name: "name"})
        public name?: string,
        @JsonProperty({name: "description"})
        public description?: string,
        @JsonProperty({name: "icon_url"})
        public iconUrl?: string,
        @JsonProperty({name: "image_url1"})
        public imageUrl1?: string,
        @JsonProperty({name: "image_url2"})
        public imageUrl2?: string,
        @JsonProperty({name: "image_url3"})
        public imageUrl3?: string,
        @JsonProperty({name: "image_url4"})
        public imageUrl4?: string,
        @JsonProperty({name: "image_url5"})
        public imageUrl5?: string,
        @JsonProperty({name: "sort_order"})
        public sortOrder?: number,
        @JsonProperty({name: "available"})
        public available?: boolean,
      ) {
      }
    }

    const request = new Request(
      sellerAppItemId,
      name,
      description,
      iconUrl,
      imageUrl1,
      imageUrl2,
      imageUrl3,
      imageUrl4,
      imageUrl5,
      sortOrder,
      available,
    )
    return await this.axios.post(
      `/sdk/${this.sellerUserId}/${this.sellerAppId}/items/update`,
      this.serializer.serialize(request)
    )
      .then(res => {
        const r = this.serializer.deserializeObject(res.data, SellerAppItemId)
        return r ?? Promise.reject()
      })
      .catch(err => {
        return Promise.reject(err)
      })
  }

  /*
   * アプリケーション商品削除
   * 戻り値: なし
   */
  public async removeSellerAppItem(
    sellerAppItemId: number,
  ): Promise<SellerAppItemId> {
    return await this.axios.post(
      `/sdk/${this.sellerUserId}/${this.sellerAppId}/items/delete`,
      this.serializer.serialize({
        "seller_app_item_id": sellerAppItemId,
      })
    )
      .then(res => {
        const r = this.serializer.deserializeObject(res.data, SellerAppItemId)
        return r ?? Promise.reject()
      })
      .catch(err => {
        return Promise.reject(err)
      })
  }

  /*
   * アプリケーション商品価格取得
   * 戻り値: 商品価格一覧
   */
  public async getSellerAppItemPrices(appItemId: number): Promise<Array<SellerAppItemPrice>> {
    return await this.axios.get(`/sdk/${this.sellerUserId}/${this.sellerAppId}/items/${appItemId}/prices`)
      .then(res => {
        const r = this.serializer.deserializeObjectArray(res.data, SellerAppItemPrice)
        return r?.filter(notNullish) ?? Promise.reject()
      })
      .catch(err => {
        return Promise.reject(err)
      })
  }

  /*
   * アプリケーション商品新規作成
   * 戻り値: なし
   */
  public async createSellerAppItemPrices(
    sellerAppItemId: number,
    prices: Array<{
      price: number,
      name: string,
      description: string
    }>
  ): Promise<Boolean> {

    @JsonObject()
    class Request {
      constructor(
        @JsonProperty({name: "seller_app_item_id", required: true})
        public sellerAppItemId?: number,
        @JsonProperty({name: "prices", required: true, type: Array<RequestPrice>})
        public prices?: Array<RequestPrice>,
      ) {
      }
    }

    @JsonObject()
    class RequestPrice {
      constructor(
        @JsonProperty({name: "price", required: true})
        public price?: number,
        @JsonProperty({name: "name"})
        public name?: string,
        @JsonProperty({name: "description"})
        public description?: string,
      ) {
      }
    }

    const request = new Request(
      sellerAppItemId,
      prices.map((value) => {
        return new RequestPrice(
          value.price,
          value.name,
          value.description
        )
      })
    )
    return await this.axios.post(
      `/sdk/${this.sellerUserId}/${this.sellerAppId}/items/${sellerAppItemId}/prices/register`,
      this.serializer.serialize(request)
    )
      .then(res => {
        return true
      })
      .catch(err => {
        return Promise.reject(err)
      })
  }

  /*
   * アプリケーション商品更新
   * 戻り値: なし
   */
  public async updateSellerAppItemPrices(
    appItemId: number,
    prices: Array<{
      sellerAppItemPriceId: number,
      price: number,
      name: string,
      description: string
    }>
  ): Promise<Boolean> {


    @JsonObject()
    class Request {
      constructor(
        @JsonProperty({name: "seller_app_item_id", required: true})
        public sellerAppItemId?: number,
        @JsonProperty({name: "prices", required: true, type: Array<RequestPrice>})
        public prices?: Array<RequestPrice>,
      ) {
      }
    }

    @JsonObject()
    class RequestPrice {
      constructor(
        @JsonProperty({name: "seller_app_item_price_id", required: true})
        public sellerAppItemPriceId?: number,
        @JsonProperty({name: "price", required: true})
        public price?: number,
        @JsonProperty({name: "name"})
        public name?: string,
        @JsonProperty({name: "description"})
        public description?: string,
      ) {
      }
    }

    const pricesReq = new Request(
      appItemId,
      prices.map((value) => {
        return new RequestPrice(
          value.sellerAppItemPriceId,
          value.price,
          value.name,
          value.description
        )
      })
    )
    return await this.axios.post(
      `/sdk/${this.sellerUserId}/${this.sellerAppId}/items/${appItemId}/prices/update`,
      this.serializer.serialize(pricesReq)
    )
      .then(res => {
        return true
      })
      .catch(err => {
        return Promise.reject(err)
      })
  }
}

@JsonObject()
export class BaseApp {
  constructor(
    @JsonProperty({name: "app_id", required: true})
    public baseAppId?: number,
    @JsonProperty({name: "name", required: true})
    public name?: string,
    @JsonProperty({name: "description"})
    public description?: string,
    @JsonProperty({name: "detail_description"})
    public detailDescription?: string,
    @JsonProperty({name: "icon_url"})
    public iconUrl?: string,
    @JsonProperty({name: "notice"})
    public notice?: string,
    @JsonProperty({name: "image_url1"})
    public imageUrl1?: string,
    @JsonProperty({name: "image_url2"})
    public imageUrl2?: string,
    @JsonProperty({name: "image_url3"})
    public imageUrl3?: string,
    @JsonProperty({name: "image_url4"})
    public imageUrl4?: string,
    @JsonProperty({name: "image_url5"})
    public imageUrl5?: string,
    @JsonProperty({name: "site_url"})
    public siteUrl?: string,
    @JsonProperty({name: "is_developing"})
    public isDeveloping?: boolean,
  ) {
  }
}

@JsonObject()
export class BaseAppItem {
  constructor(
    @JsonProperty({name: "app_item_id", required: true})
    public baseAppItemId?: number,
    @JsonProperty({name: "app_id", required: true})
    public baseAppId?: number,
    @JsonProperty({name: "name", required: true})
    public name?: string,
    @JsonProperty({name: "description"})
    public description?: string,
    @JsonProperty({name: "detail_description"})
    public detailDescription?: string,
    @JsonProperty({name: "icon_url"})
    public iconUrl?: string,
    @JsonProperty({name: "notice"})
    public notice?: string,
    @JsonProperty({name: "image_url1"})
    public imageUrl1?: string,
    @JsonProperty({name: "image_url2"})
    public imageUrl2?: string,
    @JsonProperty({name: "image_url3"})
    public imageUrl3?: string,
    @JsonProperty({name: "image_url4"})
    public imageUrl4?: string,
    @JsonProperty({name: "image_url5"})
    public imageUrl5?: string,
    @JsonProperty({name: "app_margin_rate", required: true})
    public appMarginRate?: number,
    @JsonProperty({name: "tenant_margin_rate", required: true})
    public tenantMarginRate?: number,
    @JsonProperty({name: "min_price"})
    public minPrice?: number,
    @JsonProperty({name: "max_price"})
    public maxPrice?: number,
    @JsonProperty({name: "price_type"})
    public priceType?: string,
    @JsonProperty({name: "payment_type", required: true})
    public paymentType?: string,
    @JsonProperty({name: "tags"})
    public tags?: string,
    @JsonProperty({name: "digital_content", required: true})
    public digitalContent?: boolean,
  ) {
  }
}

@JsonObject()
export class SellerApp {
  constructor(
    @JsonProperty({name: "seller_app_id", required: true})
    public sellerAppId?: number,
    @JsonProperty({name: "app_id", required: true})
    public baseAppId?: number,
    @JsonProperty({name: "name", required: true})
    public name?: string,
    @JsonProperty({name: "short_name"})
    public shortName?: string,
    @JsonProperty({name: "description"})
    public description?: string,
    @JsonProperty({name: "sort_order"})
    public sortOrder?: number,
    @JsonProperty({name: "icon_url"})
    public iconUrl?: string,
    @JsonProperty({name: "image_url1"})
    public imageUrl1?: string,
    @JsonProperty({name: "image_url2"})
    public imageUrl2?: string,
    @JsonProperty({name: "image_url3"})
    public imageUrl3?: string,
    @JsonProperty({name: "image_url4"})
    public imageUrl4?: string,
    @JsonProperty({name: "image_url5"})
    public imageUrl5?: string,
    @JsonProperty({name: "available"})
    public available?: boolean
  ) {
  }
}

@JsonObject()
export class SellerAppItem {
  constructor(
    @JsonProperty({name: "seller_app_item_id", required: true})
    public sellerAppItemId: number,
    @JsonProperty({name: "app_item_id", required: true})
    public baseAppItemId: number,
    @JsonProperty({name: "seller_app_id", required: true})
    public sellerAppId: number,
    @JsonProperty({name: "name", required: true})
    public name: string,
    @JsonProperty({name: "description"})
    public description?: string,
    @JsonProperty({name: "icon_url"})
    public iconUrl?: string,
    @JsonProperty({name: "image_url1"})
    public imageUrl1?: string,
    @JsonProperty({name: "image_url2"})
    public imageUrl2?: string,
    @JsonProperty({name: "image_url3"})
    public imageUrl3?: string,
    @JsonProperty({name: "image_url4"})
    public imageUrl4?: string,
    @JsonProperty({name: "image_url5"})
    public imageUrl5?: string,
    @JsonProperty({name: "app_margin_rate"})
    public appMarginRate?: number,
    @JsonProperty({name: "tenant_margin_rate"})
    public tenantMarginRate?: number,
    @JsonProperty({name: "available"})
    public available?: boolean,
    @JsonProperty({name: "sort_order", required: true})
    public sortOrder?: number,
  ) {
  }
}

@JsonObject()
export class SellerAppItemId {
  constructor(
    @JsonProperty({name: "seller_app_item_id", required: true})
    public sellerAppItemId?: number,
  ) {
  }
}


@JsonObject()
export class SellerAppItemPrice {
  constructor(
    @JsonProperty({name: "seller_app_item_price_id", required: true})
    public sellerAppItemPriceId?: number,
    @JsonProperty({name: "seller_app_item_id", required: true})
    public sellerAppItemId?: number,
    @JsonProperty({name: "price", required: true})
    public price?: number,
    @JsonProperty({name: "name"})
    public name?: string,
    @JsonProperty({name: "description"})
    public description?: string,
    @JsonProperty({name: "priority", required: true})
    public priority?: number,
  ) {
  }
}
